(1).default 可以写在 switch 结构中的任意位置；如果将 default 语句放在了第一行，则不管expression与case中的value是否匹配，程序会从default 开始执行直到第一个 break 出现。

(2).java 分了 5 片内存。
	1：寄存器。2：本地方法区。3：方法区。4：栈。5：堆。
	栈：存储的都是局部变量函数中定义的变量，函数上的参数，语句     中的变量 )；
		要数据运算完成所在的区域结束，该数据就会被释放。
	堆：用于存储数组和对象，也就是实体。啥是实体啊？就是用于封     装多个数据的。
		1：每一个实体都有内存首地址值。
		2：堆内存中的变量都有默认初始化值。因为数据类型不同，值也不一样。
		3：垃圾回收机制。

(3).创建一个对象都在内存中做了什么事情？
	1：先将硬盘上指定位置的 Person.class 文件加载进内存。
	2：执行 main 方法时，在栈内存中开辟了 main 方法的空间(压栈-进栈)，然后在main 方法的栈区分配了一个变量 p。
	3：在堆内存中开辟一个实体空间，分配了一个内存首地址值。new
	4：在该实体空间中进行属性的空间分配，并进行了默认初始化。
	5：对空间中的属性进行显示初始化。
	6：进行实体的构造代码块初始化。
	7：调用该实体对应的构造函数，进行构造函数初始化。（）
	8：将首地址赋值给 p ，p 变量就引用了该实体。(指向了该对象)

(4).static：关键字，是一个修饰符，用于修饰成员(成员变量和成员函数)。
特点：
	1，想要实现对象中的共性数据的对象共享。可以将这个数据进行静态修饰。
	2，被静态修饰的成员，可以直接被类名所调用。也就是说，静态的成员多了一种调
	用方式。类名.静态方式。
	3，静态随着类的加载而加载。而且优先于对象存在。

(5).静态代码块、构造代码块、构造函数同时存在时的执行顺序：
	静态代码块 --> 构造代码块 --> 构造函数；

(6).子类的所有构造函数中的第一行，其实都有一条隐身的语句super()
	super():表示父类的构造函数，并会调用于参数相对应的父类中的构造函数。而super():是在调用父类中空参数的构造函数。因为子类继承父类，会继承到父类中的数据，所以必须要看父类是如何对自己的数据进行初始化的。所以子类在进行对象初始化时，先调用父类的构造函数，这就是子类的实例化过程.如果父类中没有空参数的构造函数，那么子类的构造函数内，必须通过super语句指定要访问的父类中的构造函数。如果子类构造函数中用this来指定调用子类自己的构造函数，那么被调用的构造函数也一样会访问父类中的构造函数。

(7).在方法覆盖时，注意两点：
	1：子类覆盖父类时，必须要保证，子类方法的权限必须大于等于父类方法权限可以实现继承。否则，编译失败。
	2：覆盖时，要么都静态，要么都不静态。 (静态只能覆盖静态，或者被静态覆盖)

(8).final 特点：
	1：这个关键字是一个修饰符，可以修饰类，方法，变量。
	2：被 final 修饰的类是一个最终类，不可以被继承。
	3：被 final 修饰的方法是一个最终方法，不可以被覆盖。
	4：被 final 修饰的变量是一个常量，只能赋值一次。

(9).抽象类的特点：
	1：抽象方法只能定义在抽象类中，抽象类和抽象方法必须由 abstract 关键字修饰（可以描述类和方法，不可以描述变量）。
	2：抽象方法只定义方法声明，并不定义方法实现。
	3：抽象类不可以被创建对象(实例化)。
	4：只有通过子类继承抽象类并覆盖了抽象类中的所有抽象方法后，该子类才可以实例化。否则，该子类还是一个抽象类。

(10)接 口：
	1：是用关键字 interface 定义的。
	2：接口中包含的成员，最常见的有全局常量、抽象方法。
	注意：接口中的成员都有固定的修饰符。
	成员变量：public static final
	成员方法：public abstract 

(11)多 态
	体现：父类引用或者接口的引用指向了自己的子类对象。
	//Animala = new Cat(); 父类可以调用子类中覆写过的（父类中有的方法）
	多态的好处：提高了程序的扩展性。继承的父类或接口一般是类库中的东西，（如果要修改某个方法的具体实现方式）只有通过子类去覆写要改变的某一个方法，这样在通过将父类的应用指向子类的实例去调用覆写过的方法就行了！
	多态的弊端：当父类引用指向子类对象时，虽然提高了扩展性，但是只能访问父类中具备的方法，不可以访问子类中特有的方法。(前期不能使用后期产生的功能，即访问的局限性)
	多态的前提：
	1：必须要有关系，比如继承、或者实现。
	2：通常会有覆盖操作
	Student instanceof Person = true;//student 继承了 person 类
	多态在子父类中的成员上的体现的特点:
	成员变量 --- 编译运行都看 = 左边
	成员函数 --- 编译看 = 左边，运行看 = 右边
	静态函数 --- 编译运行都看 = 左边

(12)throw 和 throws 关键字的区别：
	throw 用于抛出异常对象，后面跟的是异常对象；throw 用在函数内。
	throws 用于抛出异常类，后面跟的异常类名，可以跟多个，用逗号隔开。throws 用在函数上。

(13)异常分两种：
	1：编译时被检查的异常，只要是Exception及其子类都是编译时被检测的异常。
	2：运行时异常，其中Exception有一个特殊的子类 RuntimeException，以及RuntimeException的子类是运行异常，也就说这个异常是编译时不被检查的异常

(14)编译时被检查的异常和运行时异常的区别：
	编译被检查的异常在函数内被抛出，函数必须要声明，否编译失败
	声明的原因：是需要调用者对该异常进行处理。
	运行时异常如果在函数内被抛出，在函数上不需要声明。
	不声明的原因：不需要调用者处理，运行时异常发生，已经无法再让程序继续运行，所以，不让调用处理的，直接让程序停止，由调用者对代码进行修正

(15)定义异常处理时，什么时候定义 try 什么时候定义 throws 呢？
	功能内部如果出现异常，如果内部可以处理，就用try
	如果功能内部处理不了，就必须声明出来，让调用者处理。使用 throws 抛出，交给调用者处理。谁调用了这个功能谁就是调用者

(16) java 中的四种权限：
	范围 		public 	protected 	default	 private
	同一个类中 	  ok 		ok 			ok 		ok
	同一包中 	  ok 		ok 			ok
	子类 		  ok
	不同包中	  ok

(17)wait：线程会释放执行权，而且线程会释放锁。
	Sleep：线程会释放执行权，但不是不释放锁。

(18)StringBuffer 和 StringBuilder 的区别：
	StringBuffer 线程安全。
	StringBuilder 线程不安全。
	单线程操作，使用 StringBuilder 效率高。
	多线程操作，使用 StringBuffer 安全。

(19)Map 集合：
	|--Hashtable：底层是哈希表数据结构，是线程同步的。不可以存储 null 键，null
	值。
	|--HashMap：底层是哈希表数据结构，是线程不同步的。可以存储 null 键，null
	值。替代了 Hashtable.
	|--TreeMap：底层是二叉树结构，可以对 map 集合中的键进行指定顺序的排序

(20)自动拆装箱java中数据类型分为两种基本数据类型引用数据类型(对象)在java程序中所有的数据都需要当做对象来处理，针对8种基本数据类型提供了包装类，如下：
		int --> Integer
		byte --> Byte
		short --> Short
		long --> Long
		char --> Character
		double --> Double
		float --> Float
		boolean --> Boolean

(21)泛型的细节：
	1）、泛型到底代表什么类型取决于调用者传入的类型，如果没传，默认是 Object 类型；
	2）、使用带泛型的类创建对象时，等式两边指定的泛型必须一致；
	原因：编译器检查对象调用方法时只看变量，然而程序运行期间调用方法时就要考
	虑对象具体类型了；
	3）、等式两边可以在任意一边使用泛型，在另一边不使用

(22)io 异常的处理方式：io 一定要写 finally
	FileReader：使用Reader体系，读取一个文本文件中的数据。返回 -1 ，标志读到结尾;
	读取数据的第二种方式：第二种方式较为高效，自定义缓冲区
		//创建读取流对象和指定文件关联
		FileReader fr = new FileReader("demo.txt"); 
		//因为要使用 read(char[])方法，将读取到字符存入数组。所以要创建一个字符数组，一般数组的长度都是1024的整数倍
		//读取的字符数组长度是 1024
		char[] buf = new char[1024];
		int len = 0;
		while(( len=fr.read(buf)) != -1) {
		System.out.println(new String(buf,0,len));//将 char 类型的数据从 0 到 len 转换成 String

(23)递归的注意事项：
	1：一定要定义递归的条件。
	2：递归的次数不要过多。容易出现 StackOverflowError 栈内存溢出错误。
	其实递归就是在栈内存中不断的加载同一个函数

(24)对象的序列化：将一个具体的对象进行持久化，写入到硬盘上
	注意：静态数据不能被序列化，因为静态数据不在堆内存中，是存储在静态方法区中。
	如何将非静态的数据不进行序列化？用transient关键字修饰此变量即可。
	Serializable：用于启动对象的序列化功能，可以强制让指定类具备序列化功能，该接口中没有成员，这是一个标记接口。这个标记接口用于给序列化类提供 UID。这个 uid是依据类中的成员的数字签名进行运行获取的。如果不需要自动获取一个uid，可以在类中，手动指定一个名称为serialVersionUIDid号。依据编译器的不同，或者对信息的高度敏感性。最好每一个序列化的类都进行手动显示的 UID 的指定

(25)反射的基本步骤：
	1、获得 Class 对象，就是获取到指定的名称的字节码文件对象。
	2、实例化对象，获得类的属性、方法或构造函数。
	3、访问属性、调用方法、调用构造函数创建对象。

==============================================================

(1).如果需要返回一個可變數據域的拷貝，就應該使用clone
	public Date getTime() {
		return new Date().clone;
	}

(2).DAO设计模式
	DAO设计模式属于J2EE数据层的操作
	DAO设计模式涉及五个重要部分：数据库连接类，实体类，Dao接口，Dao实现类，Dao工厂类（提供Dao实现类实例）。

(3).MVC设计模式
	model：
	vview：
	controller：